generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  avatarUrl     String?
  imagePublicId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  projects      ProjectMember[] @relation("UserProjectMembers")
  ownedProjects Project[]       @relation("OwnedProjects")
  tasks         Task[]          @relation("AssignedTasks")
  comments      Comment[]
  Notification  Notification[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId      String
  owner        User            @relation("OwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade)
  members      ProjectMember[] @relation("ProjectMembers")
  tasks        Task[]
  Notification Notification[]

  @@map("projects")
}

model ProjectMember {
  id        String @id @default(cuid())
  role      Role   @default(MEMBER)
  userId    String
  projectId String

  user    User    @relation("UserProjectMembers", fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation("ProjectMembers", fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  projectId  String
  assigneeId String?

  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee     User?          @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  comments     Comment[]
  Notification Notification[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskId String
  userId String

  task         Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@map("comments")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  userId    String
  projectId String?
  taskId    String?
  commentId String?
  read      Boolean          @default(false) // mark if the user has seen it
  createdAt DateTime         @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UNASSIGNED
  TASK_STATUS_CHANGED
  TASK_DELETED
  COMMENT_ADDED
  COMMENT_UPDATED
  COMMENT_DELETED
  PROJECT_MEMBER_ADDED
  PROJECT_MEMBER_REMOVED
  ROLE_CHANGED
  OWNERSHIP_TRANSFERRED
  PROJECT_DELETED
  PROJECT_UPDATED
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
